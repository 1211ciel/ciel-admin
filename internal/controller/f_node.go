// =================================================================================
// This is auto-generated by FreeKey Admin at 2022-06-16 23:34:50. For more information please go to https://github.com/1211ciel/ciel-admin
// =================================================================================

package controller

import (
	"ciel-admin/internal/model/entity"
	"ciel-admin/internal/service/sys"
	"ciel-admin/manifest/config"
	"ciel-admin/utility/utils/res"
	"ciel-admin/utility/utils/xparam"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/gogf/gf/v2/os/gtime"
)

type cNode struct{ *config.Search }

var Node = &cNode{Search: &config.Search{
	T1: "f_node", T2: "s_admin t2 on t1.uid = t2.id", OrderBy: "t1.happen_date desc,t1.id desc", SearchFields: "t1.*,t2.uname",
	Fields: []*config.Field{
		{Name: "level", SearchType: 1, QueryName: "level"}, {Name: "t2.uname", SearchType: 2, QueryName: "uname"}, {Name: "tag", SearchType: 2, QueryName: "tag"}, {Name: "main_things", SearchType: 2, QueryName: "main_things"}, {Name: "other_info", SearchType: 2, QueryName: "other_info"},
	},
}}

func (c *cNode) Path(r *ghttp.Request) {
	icon, err := sys.Icon(r.Context(), r.URL.Path)
	if err != nil {
		res.Err(err, r)
	}
	res.Page(r, "/f/f_node.html", g.Map{"icon": icon})
}
func (c *cNode) List(r *ghttp.Request) {
	page, size := res.GetPage(r)
	c.Page = page
	c.Size = size
	total, data, err := sys.List(r.Context(), c.Search)
	if err != nil {
		res.Err(err, r)
	}
	res.OkPage(page, size, total, data, r)
}
func (c *cNode) GetById(r *ghttp.Request) {
	data, err := sys.GetById(r.Context(), c.T1, xparam.ID(r))
	if err != nil {
		res.Err(err, r)
	}
	res.OkData(data, r)
}
func (c *cNode) Post(r *ghttp.Request) {
	d := entity.Node{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	admin, err := sys.GetAdmin(r)
	if err != nil {
		res.Err(err, r)
	}
	d.Uid = admin.Admin.Id
	if d.HappenDate == "" {
		d.HappenDate = gtime.Now().String()
	}
	if err := sys.Add(r.Context(), c.T1, &d); err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
func (c *cNode) Put(r *ghttp.Request) {
	d := entity.Node{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	if err := sys.Update(r.Context(), c.T1, d.Id, &d); err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
func (c *cNode) Del(r *ghttp.Request) {
	if err := sys.DelBatch(r.Context(), c.T1, r.Get("ids").Array()); err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
