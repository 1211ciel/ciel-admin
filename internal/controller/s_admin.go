// =================================================================================
// This is auto-generated by FreeKey Admin at 2022-06-27 16:27:03. For more information see https://github.com/1211ciel/ciel-admin
// =================================================================================

package controller

import (
	"ciel-admin/internal/consts"
	"ciel-admin/internal/model/entity"
	"ciel-admin/internal/service/sys"
	"ciel-admin/manifest/config"
	"ciel-admin/utility/utils/res"
	"ciel-admin/utility/utils/xparam"
	"ciel-admin/utility/utils/xpwd"
	"ciel-admin/utility/utils/xurl"
	"fmt"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
)

type cAdmin struct{ *config.Search }

var Admin = &cAdmin{Search: &config.Search{
	T1: "s_admin", T2: "s_role t2 on t1.rid = t2.id", OrderBy: "t1.id desc", SearchFields: "t1.*,t2.name role_name",
	Fields: []*config.Field{
		{Name: "rid", SearchType: 1, QueryName: "admin_rid"}, {Name: "status", SearchType: 1, QueryName: "admin_status"},
	},
}}

func (c *cAdmin) Path(r *ghttp.Request) {
	roles, err := sys.Roles(r.Context())
	if err != nil {
		res.Err(err, r)
	}
	node, err := sys.NodeInfo(r.Context(), r.URL.Path)
	if err != nil {
		res.Err(err, r)
	}
	c.Page, c.Size = res.GetPage(r)
	total, data, err := sys.List(r.Context(), c.Search)
	if err != nil {
		res.Err(err, r)
	}
	if err = r.Response.WriteTpl("/sys/admin/index.html", g.Map{
		"list":  data,
		"page":  r.GetPage(total, c.Size).GetContent(3),
		"node":  node,
		"msg":   sys.MsgFromSession(r),
		"roles": roles,
	}); err != nil {
		res.Err(err, r)
	}
}
func (c *cAdmin) PathAdd(r *ghttp.Request) {
	roles, err := sys.Roles(r.Context())
	if err != nil {
		res.Err(err, r)
	}
	r.Response.WriteTpl("/sys/admin/add.html", g.Map{"msg": sys.MsgFromSession(r), "roles": roles})
}
func (c *cAdmin) Post(r *ghttp.Request) {
	d := entity.Admin{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	d.Pwd = xpwd.GenPwd(d.Pwd)
	msg := fmt.Sprintf(consts.MsgPrimary, "添加成功")
	if err := sys.Add(r.Context(), c.T1, &d); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/admin/path/add?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c *cAdmin) Del(r *ghttp.Request) {
	id := r.Get("id")
	msg := fmt.Sprintf(consts.MsgPrimary, "删除成功")
	if err := sys.Del(r.Context(), c.T1, id); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/admin/path?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c *cAdmin) PathEdit(r *ghttp.Request) {
	roles, err := sys.Roles(r.Context())
	if err != nil {
		res.Err(err, r)
	}
	data, err := sys.GetById(r.Context(), c.Search.T1, xparam.ID(r))
	g.Log().Notice(nil, data["rid"])

	if err != nil {
		res.Err(err, r)
	}
	_ = r.Session.Set("admin_edit", data.Map())
	_ = r.Response.WriteTpl("/sys/admin/edit.html", g.Map{"msg": sys.MsgFromSession(r), "roles": roles})
}
func (c *cAdmin) Put(r *ghttp.Request) {
	d := entity.Admin{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	if err := sys.Update(r.Context(), c.T1, d.Id, &d); err != nil {
		res.Err(err, r)
	}
	msg := fmt.Sprintf(consts.MsgPrimary, "修改成功")
	if err := sys.Update(r.Context(), c.T1, d.Id, &d); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/admin/path/edit/", d.Id, "?", xurl.ToUrlParams(r.GetQueryMap())))
}
