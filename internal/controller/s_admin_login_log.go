// =================================================================================
// This is auto-generated by FreeKey Admin at 2022-07-11 20:40:00. For more information see https://github.com/1211ciel/ciel-admin
// =================================================================================

package controller

import (

	"ciel-admin/internal/consts"
	"ciel-admin/internal/model/bo"
	"ciel-admin/internal/model/entity"
	"ciel-admin/internal/service/sys"
	"ciel-admin/utility/utils/res"
	"ciel-admin/utility/utils/xparam"
	"ciel-admin/utility/utils/xurl"
	"fmt"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/gogf/gf/v2/util/gconv"
)

type cAdminLoginLog struct{ bo.Search }

var AdminLoginLog = &cAdminLoginLog{Search: bo.Search{
	T1:"s_admin_login_log", OrderBy: "t1.id desc", SearchFields: "t1.*",
	Fields: []bo.Field{
		
	},
}}

func (c cAdminLoginLog) Path(r *ghttp.Request) {
	node, err := sys.NodeInfo(r.Context(), r.URL.Path)
	if err != nil {
		res.Err(err, r)
	}
	c.Page, c.Size = res.GetPage(r)
	total, data, err := sys.List(r.Context(), c.Search)
	if err != nil {
		res.Err(err, r)
	}
	if err = r.Response.WriteTpl("/sys/adminLoginLog/index.html", g.Map{
		"list": data,
		"page": r.GetPage(total, c.Size).GetContent(3),
		"node": node,
		"msg":  sys.MsgFromSession(r),
		"path": r.URL.Path,
	}); err != nil {
		res.Err(err, r)
	}
}
func (c cAdminLoginLog) PathAdd(r *ghttp.Request) {
	r.Response.WriteTpl("/sys/adminLoginLog/add.html", g.Map{"msg": sys.MsgFromSession(r)})
}
func (c cAdminLoginLog) Post(r *ghttp.Request) {
	d := entity.AdminLoginLog{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	msg := fmt.Sprintf(consts.MsgPrimary, "添加成功")
	if err := sys.Add(r.Context(), c.T1, &d); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/adminLoginLog/path/add?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c cAdminLoginLog) Del(r *ghttp.Request) {
	id := r.Get("id")
	msg := fmt.Sprintf(consts.MsgPrimary, "删除成功")
	if err := sys.Del(r.Context(), c.T1, id); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/adminLoginLog/path?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c cAdminLoginLog) PathEdit(r *ghttp.Request) {
	data, err := sys.GetById(r.Context(), c.Search.T1, xparam.ID(r))
	if err != nil {
		res.Err(err, r)
	}
	_ = r.Session.Set("adminLoginLog_edit", data.Map())
	_ = r.Response.WriteTpl("/sys/adminLoginLog/edit.html", g.Map{"msg": sys.MsgFromSession(r)})
}
func (c cAdminLoginLog) Put(r *ghttp.Request) {
	d := entity.AdminLoginLog{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	m := gconv.Map(d)
	delete(m, "createdAt")
	msg := fmt.Sprintf(consts.MsgPrimary, "修改成功")
	if err := sys.Update(r.Context(), c.T1, d.Id, m); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/adminLoginLog/path/edit/", d.Id, "?", xurl.ToUrlParams(r.GetQueryMap())))
}
