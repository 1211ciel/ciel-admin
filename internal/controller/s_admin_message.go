// =================================================================================
// This is auto-generated by FreeKey Admin at 2022-07-22 20:14:53. For more information see https://github.com/1211ciel/ciel-admin
// =================================================================================

package controller

import (
	"ciel-admin/internal/consts"
	"ciel-admin/internal/model/bo"
	"ciel-admin/internal/model/entity"
	"ciel-admin/internal/service/sys"
	"ciel-admin/utility/utils/res"
	"ciel-admin/utility/utils/xparam"
	"ciel-admin/utility/utils/xurl"
	"fmt"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/gogf/gf/v2/util/gconv"
)

type cAdminMessage struct{ bo.Search }

var AdminMessage = &cAdminMessage{Search: bo.Search{
	T1: "s_admin_message", T2: "s_admin t2 on t2.id=t1.from_uid", T3: "s_admin t3 on t3.id=t1.to_uid", OrderBy: "t1.id desc", SearchFields: "t1.*,t2.uname from_uname,t3.uname to_uname",
	Fields: []bo.Field{
		{Name: "t2.from_uname", SearchType: 2, QueryName: "adminMessage_from_uname"}, {Name: "t3.uname", SearchType: 2, QueryName: "adminMessage_to_uname"}, {Name: "group", SearchType: 1, QueryName: "adminMessage_group"}, {Name: "type", SearchType: 1, QueryName: "adminMessage_type"}, {Name: "content", SearchType: 2, QueryName: "adminMessage_content"}, {Name: "link", SearchType: 2, QueryName: "adminMessage_link"},
	},
}}

func (c cAdminMessage) Path(r *ghttp.Request) {
	node, err := sys.NodeInfo(r.Context(), r.URL.Path)
	if err != nil {
		res.Err(err, r)
	}
	c.Page, c.Size = res.GetPage(r)
	total, data, err := sys.List(r.Context(), c.Search)
	if err != nil {
		res.Err(err, r)
	}
	adminOptions, err := sys.GetAllAdminOptions(r.Context())
	if err != nil {
		res.Err(err, r)
	}
	if err = r.Response.WriteTpl("/sys/adminMessage/index.html", g.Map{
		"list":         data,
		"page":         r.GetPage(total, c.Size).GetContent(3),
		"node":         node,
		"msg":          sys.MsgFromSession(r),
		"adminOptions": adminOptions.String(),
		"path":         r.URL.Path,
	}); err != nil {
		res.Err(err, r)
	}
}
func (c cAdminMessage) PathAdd(r *ghttp.Request) {
	r.Response.WriteTpl("/sys/adminMessage/add.html", g.Map{"msg": sys.MsgFromSession(r)})
}
func (c cAdminMessage) Post(r *ghttp.Request) {
	d := entity.AdminMessage{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	admin, err := sys.GetAdmin(r)
	if err != nil {
		res.Err(err, r)
	}
	d.FromUid = admin.Admin.Id
	d.Status = 1
	msg := fmt.Sprintf(consts.MsgPrimary, "发送成功")
	if err := sys.Add(r.Context(), c.T1, &d); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	r.Session.Set("msg", msg)
	d.Content = ""
	_ = r.Session.Set("adminMessage_edit", d)
	if err = sys.NoticeAdmin(r.Context(), "{'msg':'hello'}", d.ToUid); err != nil {
		res.Err(err, r)
	}
	if err = sys.AddAdminUnReadMsg(r.Context(), d.ToUid); err != nil {
		res.Err(err, r)
	}
	r.Response.RedirectTo(fmt.Sprint("/admin/adminMessage/path?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c cAdminMessage) Del(r *ghttp.Request) {
	id := r.Get("id")
	msg := fmt.Sprintf(consts.MsgPrimary, "删除成功")
	if err := sys.Del(r.Context(), c.T1, id); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/admin/adminMessage/path?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c cAdminMessage) PathEdit(r *ghttp.Request) {
	data, err := sys.GetById(r.Context(), c.Search.T1, xparam.ID(r))
	if err != nil {
		res.Err(err, r)
	}
	_ = r.Session.Set("adminMessage_edit", data.Map())
	_ = r.Response.WriteTpl("/sys/adminMessage/edit.html", g.Map{"msg": sys.MsgFromSession(r)})
}
func (c cAdminMessage) Put(r *ghttp.Request) {
	d := entity.AdminMessage{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	m := gconv.Map(d)
	delete(m, "createdAt")
	msg := fmt.Sprintf(consts.MsgPrimary, "修改成功")
	if err := sys.Update(r.Context(), c.T1, d.Id, m); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/admin/adminMessage/path/edit/", d.Id, "?", xurl.ToUrlParams(r.GetQueryMap())))
}

func (c cAdminMessage) UnreadMsgCount(r *ghttp.Request) {
	count, err := sys.GetAdminUnreadMsgCount(r.Context())
	if err != nil {
		res.Err(err, r)
	}
	res.OkData(count, r)
}

func (c cAdminMessage) ClearUnreadMsg(r *ghttp.Request) {
	err := sys.ClearUnreadMsg(r.Context())
	if err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}

func (c cAdminMessage) Clear(r *ghttp.Request) {
	if err := sys.ClearAdminMessage(r.Context(), r.Get("group").String()); err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
