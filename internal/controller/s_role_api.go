// =================================================================================
// This is auto-generated by FreeKey Admin at 2022-06-27 19:10:03. For more information see https://github.com/1211ciel/ciel-admin
// =================================================================================

package controller

import (
	"ciel-admin/internal/consts"
	"ciel-admin/internal/model/entity"
	"ciel-admin/internal/service/sys"
	"ciel-admin/manifest/config"
	"ciel-admin/utility/utils/res"
	"ciel-admin/utility/utils/xparam"
	"ciel-admin/utility/utils/xurl"
	"fmt"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
)

type cRoleApi struct{ *config.Search }

var RoleApi = &cRoleApi{Search: &config.Search{
	T1: "s_role_api", T2: "s_role t2 on t1.rid = t2.id", T3: "s_api t3 on t1.aid = t3.id",
	SearchFields: "t1.*,t2.name r_name,t3.url url ,t3.group,t3.method,t3.desc ", Fields: []*config.Field{
		{Name: "id"},
		{Name: "rid", SearchType: 1},
		{Name: "aid"},
		{Name: "t2.name", QueryName: "r_name", SearchType: 2},
		{Name: "t3.url"},
	},
}}

func (c *cRoleApi) Path(r *ghttp.Request) {
	node, err := sys.NodeInfo(r.Context(), r.URL.Path)
	if err != nil {
		res.Err(err, r)
	}
	node.Path = "/roleApi/path"
	node.Name = "角色禁用API"
	c.Page, c.Size = res.GetPage(r)
	total, data, err := sys.List(r.Context(), c.Search)
	if err != nil {
		res.Err(err, r)
	}
	if err = r.Response.WriteTpl("/sys/roleApi/index.html", g.Map{
		"list": data,
		"page": r.GetPage(total, c.Size).GetContent(3),
		"node": node,
		"msg":  sys.MsgFromSession(r),
	}); err != nil {
		res.Err(err, r)
	}
}
func (c *cRoleApi) PathAdd(r *ghttp.Request) {
	apis, err := sys.RoleNoApi(r.Context(), r.Get("rid"))
	if err != nil {
		res.Err(err, r)
	}
	r.Response.WriteTpl("/sys/roleApi/add.html", g.Map{"msg": sys.MsgFromSession(r), "apis": apis})
}
func (c *cRoleApi) Post(r *ghttp.Request) {
	var d struct {
		Rid int
		Aid []int
	}
	_ = r.Parse(&d)
	msg := fmt.Sprintf(consts.MsgPrimary, "添加成功")
	if err := sys.AddRoleApi(r.Context(), d.Rid, d.Aid); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/roleApi/path/add?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c *cRoleApi) Del(r *ghttp.Request) {
	id := r.Get("id")
	msg := fmt.Sprintf(consts.MsgPrimary, "删除成功")
	if err := sys.Del(r.Context(), c.T1, id); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/roleApi/path?", xurl.ToUrlParams(r.GetQueryMap())))
}
func (c *cRoleApi) PathEdit(r *ghttp.Request) {
	data, err := sys.GetById(r.Context(), c.Search.T1, xparam.ID(r))
	if err != nil {
		res.Err(err, r)
	}
	_ = r.Session.Set("roleApi_edit", data.Map())
	_ = r.Response.WriteTpl("/sys/roleApi/edit.html", g.Map{"msg": sys.MsgFromSession(r)})
}
func (c *cRoleApi) Put(r *ghttp.Request) {
	d := entity.RoleApi{}
	if err := r.Parse(&d); err != nil {
		res.Err(err, r)
	}
	if err := sys.Update(r.Context(), c.T1, d.Id, &d); err != nil {
		res.Err(err, r)
	}
	msg := fmt.Sprintf(consts.MsgPrimary, "修改成功")
	if err := sys.Update(r.Context(), c.T1, d.Id, &d); err != nil {
		msg = fmt.Sprintf(consts.MsgWarning, err.Error())
	}
	_ = r.Session.Set("msg", msg)
	r.Response.RedirectTo(fmt.Sprint("/roleApi/path/edit/", d.Id, "?", xurl.ToUrlParams(r.GetQueryMap())))
}

func (c *cRoleApi) Clear(r *ghttp.Request) {
	err := sys.ClearRoleApi(r.Context(), r.Get("rid"))
	if err != nil {
		res.Err(err, r)
	}
	res.Ok(r)
}
